blueprint:
  name: "Auto Room Occupancy"
  description:
    "Automatically turn on and off an ocupancy switch for a single room.\n
    \n------LOGIC------\nOccupied when ANY of the following conditions are met (all
    are optional).\n  - any motion\n  - any media player playing\n\nOccupancy
    is cleared when ALL of the following conditions are met (all are optional):\n
    \ - motion off for a set amount of time\n  - no player in room played for a set
    amount of time\n\n------HELPERS------\n  Uses the following
    helpers to allow for front end control of timeouts:\n  - input_number.motion_occupancy_timeout (default: 10 mins)\n
    \ - input_number.media_occupancy_timeout (default: 10 mins)\n"
  domain: automation
  input:
    occupied_on_motion_enabled:
      name: Enable Motion Occupancy
      description: Turn on/off occupancy via motion sensor(s).
      default: true
      selector:
        boolean: {}
    motion_sensor:
      name: Motion Sensor(s)
      description: Motion sensor (or group of motion sensors) in the room.
      default: binary_sensor.none
      selector:
        entity:
          domain:
            - binary_sensor
          device_class:
            - motion
          multiple: false
    occupied_on_media_enabled:
      name: Enable Media Occupancy
      description: Turn on/off occupancy via media player(s).
      default: false
      selector:
        boolean: {}
    media_players:
      name: Media Player(s)
      description: List of media player entities in room (comma separated).
      default: media_player.none
      selector:
        entity:
          domain:
            - media_player
          multiple: false
    media_states:
      name: Media State(s)
      description: Media player state(s) when room is occupied (comma separated).
      default: playing
      selector:
        text: {}
    disabled_entity_id:
      name: Disable Mode (Optional)
      description: An input_boolean to disable automation logic when on.
      default: none
      selector:
        entity:
          domain:
            - input_boolean
          multiple: false
    occupancy_switch:
      name: Occupancy Switch
      description:
        An input_boolean that switches occupancy state in target room.
        On = occupied and Off = not_occupied.
      default: none
      selector:
        entity:
          domain:
            - input_boolean
          multiple: false
  source_url: https://github.com/unkreativerdennis/automatic-room-occupancy/blob/main/automatic-room-occupancy.yaml
variables:
  time_now: "{{ as_timestamp(now()) }}"
  media_players_str: !input media_players
  media_players: "{{ media_players_str.split(',') | map('trim') | list }}"
  media_states_str: !input media_states
  media_states: "{{ media_states_str.split(',') | map('trim') | list }}"
  media_timeout: "{{ states('input_number.media_occupancy_timeout') | int(10) }}"
  media_is_playing:
    "{{ expand(media_players) | selectattr('state','in', media_states)
    | list | count > 0 }}"
  motion_sensor: !input motion_sensor
  motion_timeout:
    "{{ states('input_number.motion_occupancy_timeout') | float(10)
    }}"
  motion_last_changed:
    "{{ states[motion_sensor].last_changed.timestamp() | float(0)
    }}"
  motion_is_timed_out:
    "{{ (time_now - motion_last_changed) > (motion_timeout * 60)
    }}"
  is_motion: "{{ is_state(motion_sensor, 'on') }}"
  occupied_on_motion_enabled: !input occupied_on_motion_enabled
  occupied_on_media_enabled: !input occupied_on_media_enabled
  disabled_entity_id: !input disabled_entity_id
  blueprint_disabled:
    "{{ disabled_entity_id != 'none' and is_state(disabled_entity_id,
    'on') }}"
mode: parallel
trigger:
  - platform: state
    entity_id: !input motion_sensor
    to: "on"
  - platform: state
    entity_id: !input motion_sensor
    to: "off"
    for:
      minutes: "{{ states('input_number.motion_occupancy_timeout') | int(10) }}"
  - platform: state
    entity_id: !input media_players
condition:
  - "{{ not blueprint_disabled }}"
action:
  - choose:
      - conditions:
          - "{{ occupied_on_motion_enabled }}"
          - "{{ is_motion }}"
        sequence:
          - service: input_boolean.turn_on
            data:
              entity_id: !input occupancy_switch
      - conditions:
          - "{{ occupied_on_media_enabled }}"
          - "{{ media_is_playing }}"
        sequence:
          - service: input_boolean.turn_on
            data:
              entity_id: !input occupancy_switch
      - conditions:
          - "{{ not is_motion }}"
          - "{{ motion_is_timed_out }}"
          - "{% set t = (time_now - media_timeout) * 60 %} {% set ns = namespace(not_playing=[])
            %} {% for player in media_players %}\n  {% for state in media_states %}\n    {%
            if states[player].last_changed is defined %}\n      {% set timed_out = states[player].last_changed.timestamp()
            < t %}\n    {% else %}\n      {% set timed_out = true %}\n    {% endif %}\n
            \   {% if states(player) != state and timed_out %}\n      {% set ns.not_playing
            = ns.not_playing + [ player.entity_id ] %}\n    {% endif %}\n  {% endfor %}\n{%
            endfor %} {{ ns.not_playing | length >= media_players | length }}\n"
        sequence:
          - service: input_boolean.turn_off
            data:
              entity_id: !input occupancy_switch
